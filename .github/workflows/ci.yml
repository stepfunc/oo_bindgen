name: CI
on:
  push:
    branches:
      - master
  pull_request:
jobs:
  # Lock the dependencies
  lock:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: oo-bindgen
      - name: Checkout complicense
        uses: actions/checkout@v2
        with:
          repository: stepfunc/complicense
          path: complicense
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Install cargo-license
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-license
      - name: Update dependencies
        working-directory: oo-bindgen
        run: cargo update
      - name: Generate dependencies.json
        working-directory: oo-bindgen/oo-bindgen
        run: cargo-license --avoid-dev-deps --avoid-build-deps -j > ../dependencies.json
      - name: Generate dependencies.txt
        working-directory: complicense
        run: cargo run -- --import ../oo-bindgen/dependencies.json --config ../oo-bindgen/deps-config.json  --token ${{ github.token }} > ../oo-bindgen/dependencies.txt
      - name: Upload dependencies info
        uses: actions/upload-artifact@v2
        with:
          name: dependencies
          path: |
            oo-bindgen/Cargo.lock
            oo-bindgen/dependencies.json
            oo-bindgen/dependencies.txt
  # Run the unit tests on Windows and Linux
  test:
    needs: lock
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        rust:
          - stable
          - beta
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Copy Windows config
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: Copy-Item -Path .cargo/config-windows.toml -Destination .cargo/config.toml
      - name: Copy Linux config
        if: ${{ runner.os == 'Linux' }}
        shell: pwsh
        run: Copy-Item -Path .cargo/config-linux.toml -Destination .cargo/config.toml
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Run Rust unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
  # Check formatting and run clippy lints
  linting:
    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy
      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
  # Build bindings on Windows x64 and Linux x64
  bindings:
    needs: lock
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest # 64-bit Linux (kernel 2.6.32+, glibc 2.11+) (x86_64-unknown-linux-gnu)
          - windows-latest # 64-bit MSVC (Windows 7+) (x86_64-pc-windows-msvc)
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Copy Windows config
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: Copy-Item -Path .cargo/config-windows.toml -Destination .cargo/config.toml
      - name: Copy Linux config
        if: ${{ runner.os == 'Linux' }}
        shell: pwsh
        run: Copy-Item -Path .cargo/config-linux.toml -Destination .cargo/config.toml
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: C bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin foo-bindings -- --c
      - name: .NET bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin foo-bindings -- --dotnet
      - name: Java bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin foo-bindings -- --java
      - name: Upload compiled C bindings (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: tests/bindings/c/generated/x86_64-pc-windows-msvc/lib
      - name: Upload compiled C bindings (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: tests/bindings/c/generated/x86_64-unknown-linux-gnu/lib
      - name: Upload compiled Java bindings
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: tests/bindings/java/foo/src/main/resources
  # Cross-compilation for ARM devices and produce C bindings
  cross:
    needs: lock
    strategy:
      fail-fast: false
      matrix:
        target:
          - arm-unknown-linux-gnueabi # ARMv6 Linux (kernel 3.2, glibc 2.17)
          - arm-unknown-linux-gnueabihf # ARMv6 Linux, hardfloat (kernel 3.2, glibc 2.17)
          - armv7-unknown-linux-gnueabihf # ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)
          - aarch64-unknown-linux-gnu # ARM64 Linux (kernel 4.2, glibc 2.17+)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}
      - name: C bindings
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: run
          args: --release --target ${{ matrix.target }} --bin foo-bindings -- --c --no-tests
      - name: Upload compiled C bindings
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: tests/bindings/c/generated/${{ matrix.target }}/lib
  # Package all the generated bindings
  packaging:
    needs: [lock, bindings, cross]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Download compiled FFI
        uses: actions/download-artifact@v2
        with:
          name: ffi-modules
          path: ffi-modules
      - name: Package all bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --bin foo-bindings -- --package ./ffi-modules -f dependencies.txt
      - name: Upload C bindings
        uses: actions/upload-artifact@v2
        with:
          name: c-bindings
          path: tests/bindings/c/generated
      - name: Upload .NET bindings
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-bindings
          path: tests/bindings/dotnet/nupkg/*
      - name: Upload Java bindings
        uses: actions/upload-artifact@v2
        with:
          name: java-bindings
          path: tests/bindings/java/foo/target/*.jar
